// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file collo/v1/collo.proto (package collo.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message collo.v1.ColloRequest
 */
export class ColloRequest extends Message<ColloRequest> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  constructor(data?: PartialMessage<ColloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collo.v1.ColloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "message", T: Timestamp },
    { no: 3, name: "until", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloRequest {
    return new ColloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloRequest {
    return new ColloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloRequest {
    return new ColloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColloRequest | PlainMessage<ColloRequest> | undefined, b: ColloRequest | PlainMessage<ColloRequest> | undefined): boolean {
    return proto3.util.equals(ColloRequest, a, b);
  }
}

/**
 * @generated from message collo.v1.ColloStreamResponse
 */
export class ColloStreamResponse extends Message<ColloStreamResponse> {
  /**
   * @generated from field: map<int32, string> words = 1;
   */
  words: { [key: number]: string } = {};

  /**
   * @generated from field: repeated collo.v1.Pair pairs = 2;
   */
  pairs: Pair[] = [];

  constructor(data?: PartialMessage<ColloStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collo.v1.ColloStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "words", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "pairs", kind: "message", T: Pair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColloStreamResponse | PlainMessage<ColloStreamResponse> | undefined, b: ColloStreamResponse | PlainMessage<ColloStreamResponse> | undefined): boolean {
    return proto3.util.equals(ColloStreamResponse, a, b);
  }
}

/**
 * @generated from message collo.v1.Pair
 */
export class Pair extends Message<Pair> {
  /**
   * @generated from field: repeated int32 values = 1;
   */
  values: number[] = [];

  constructor(data?: PartialMessage<Pair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collo.v1.Pair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pair {
    return new Pair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pair {
    return new Pair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pair {
    return new Pair().fromJsonString(jsonString, options);
  }

  static equals(a: Pair | PlainMessage<Pair> | undefined, b: Pair | PlainMessage<Pair> | undefined): boolean {
    return proto3.util.equals(Pair, a, b);
  }
}

