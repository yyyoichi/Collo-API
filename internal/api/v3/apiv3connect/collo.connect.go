// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v3/collo.proto

package apiv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v3 "yyyoichi/Collo-API/internal/api/v3"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MintGreenServiceName is the fully-qualified name of the MintGreenService service.
	MintGreenServiceName = "api.v3.MintGreenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MintGreenServiceNetworkStreamProcedure is the fully-qualified name of the MintGreenService's
	// NetworkStream RPC.
	MintGreenServiceNetworkStreamProcedure = "/api.v3.MintGreenService/NetworkStream"
	// MintGreenServiceNodeRateStreamProcedure is the fully-qualified name of the MintGreenService's
	// NodeRateStream RPC.
	MintGreenServiceNodeRateStreamProcedure = "/api.v3.MintGreenService/NodeRateStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mintGreenServiceServiceDescriptor              = v3.File_api_v3_collo_proto.Services().ByName("MintGreenService")
	mintGreenServiceNetworkStreamMethodDescriptor  = mintGreenServiceServiceDescriptor.Methods().ByName("NetworkStream")
	mintGreenServiceNodeRateStreamMethodDescriptor = mintGreenServiceServiceDescriptor.Methods().ByName("NodeRateStream")
)

// MintGreenServiceClient is a client for the api.v3.MintGreenService service.
type MintGreenServiceClient interface {
	NetworkStream(context.Context, *connect.Request[v3.NetworkStreamRequest]) (*connect.ServerStreamForClient[v3.NetworkStreamResponse], error)
	NodeRateStream(context.Context, *connect.Request[v3.NodeRateStreamRequest]) (*connect.ServerStreamForClient[v3.NodeRateStreamResponse], error)
}

// NewMintGreenServiceClient constructs a client for the api.v3.MintGreenService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMintGreenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MintGreenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mintGreenServiceClient{
		networkStream: connect.NewClient[v3.NetworkStreamRequest, v3.NetworkStreamResponse](
			httpClient,
			baseURL+MintGreenServiceNetworkStreamProcedure,
			connect.WithSchema(mintGreenServiceNetworkStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		nodeRateStream: connect.NewClient[v3.NodeRateStreamRequest, v3.NodeRateStreamResponse](
			httpClient,
			baseURL+MintGreenServiceNodeRateStreamProcedure,
			connect.WithSchema(mintGreenServiceNodeRateStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mintGreenServiceClient implements MintGreenServiceClient.
type mintGreenServiceClient struct {
	networkStream  *connect.Client[v3.NetworkStreamRequest, v3.NetworkStreamResponse]
	nodeRateStream *connect.Client[v3.NodeRateStreamRequest, v3.NodeRateStreamResponse]
}

// NetworkStream calls api.v3.MintGreenService.NetworkStream.
func (c *mintGreenServiceClient) NetworkStream(ctx context.Context, req *connect.Request[v3.NetworkStreamRequest]) (*connect.ServerStreamForClient[v3.NetworkStreamResponse], error) {
	return c.networkStream.CallServerStream(ctx, req)
}

// NodeRateStream calls api.v3.MintGreenService.NodeRateStream.
func (c *mintGreenServiceClient) NodeRateStream(ctx context.Context, req *connect.Request[v3.NodeRateStreamRequest]) (*connect.ServerStreamForClient[v3.NodeRateStreamResponse], error) {
	return c.nodeRateStream.CallServerStream(ctx, req)
}

// MintGreenServiceHandler is an implementation of the api.v3.MintGreenService service.
type MintGreenServiceHandler interface {
	NetworkStream(context.Context, *connect.Request[v3.NetworkStreamRequest], *connect.ServerStream[v3.NetworkStreamResponse]) error
	NodeRateStream(context.Context, *connect.Request[v3.NodeRateStreamRequest], *connect.ServerStream[v3.NodeRateStreamResponse]) error
}

// NewMintGreenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMintGreenServiceHandler(svc MintGreenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mintGreenServiceNetworkStreamHandler := connect.NewServerStreamHandler(
		MintGreenServiceNetworkStreamProcedure,
		svc.NetworkStream,
		connect.WithSchema(mintGreenServiceNetworkStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mintGreenServiceNodeRateStreamHandler := connect.NewServerStreamHandler(
		MintGreenServiceNodeRateStreamProcedure,
		svc.NodeRateStream,
		connect.WithSchema(mintGreenServiceNodeRateStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v3.MintGreenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MintGreenServiceNetworkStreamProcedure:
			mintGreenServiceNetworkStreamHandler.ServeHTTP(w, r)
		case MintGreenServiceNodeRateStreamProcedure:
			mintGreenServiceNodeRateStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMintGreenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMintGreenServiceHandler struct{}

func (UnimplementedMintGreenServiceHandler) NetworkStream(context.Context, *connect.Request[v3.NetworkStreamRequest], *connect.ServerStream[v3.NetworkStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v3.MintGreenService.NetworkStream is not implemented"))
}

func (UnimplementedMintGreenServiceHandler) NodeRateStream(context.Context, *connect.Request[v3.NodeRateStreamRequest], *connect.ServerStream[v3.NodeRateStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v3.MintGreenService.NodeRateStream is not implemented"))
}
