// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/collo.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v2 "yyyoichi/Collo-API/internal/api/v2"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ColloRateWebServiceName is the fully-qualified name of the ColloRateWebService service.
	ColloRateWebServiceName = "api.v2.ColloRateWebService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ColloRateWebServiceColloRateWebStreamProcedure is the fully-qualified name of the
	// ColloRateWebService's ColloRateWebStream RPC.
	ColloRateWebServiceColloRateWebStreamProcedure = "/api.v2.ColloRateWebService/ColloRateWebStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	colloRateWebServiceServiceDescriptor                  = v2.File_api_v2_collo_proto.Services().ByName("ColloRateWebService")
	colloRateWebServiceColloRateWebStreamMethodDescriptor = colloRateWebServiceServiceDescriptor.Methods().ByName("ColloRateWebStream")
)

// ColloRateWebServiceClient is a client for the api.v2.ColloRateWebService service.
type ColloRateWebServiceClient interface {
	ColloRateWebStream(context.Context, *connect.Request[v2.ColloRateWebStreamRequest]) (*connect.ServerStreamForClient[v2.ColloRateWebStreamResponse], error)
}

// NewColloRateWebServiceClient constructs a client for the api.v2.ColloRateWebService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewColloRateWebServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ColloRateWebServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &colloRateWebServiceClient{
		colloRateWebStream: connect.NewClient[v2.ColloRateWebStreamRequest, v2.ColloRateWebStreamResponse](
			httpClient,
			baseURL+ColloRateWebServiceColloRateWebStreamProcedure,
			connect.WithSchema(colloRateWebServiceColloRateWebStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// colloRateWebServiceClient implements ColloRateWebServiceClient.
type colloRateWebServiceClient struct {
	colloRateWebStream *connect.Client[v2.ColloRateWebStreamRequest, v2.ColloRateWebStreamResponse]
}

// ColloRateWebStream calls api.v2.ColloRateWebService.ColloRateWebStream.
func (c *colloRateWebServiceClient) ColloRateWebStream(ctx context.Context, req *connect.Request[v2.ColloRateWebStreamRequest]) (*connect.ServerStreamForClient[v2.ColloRateWebStreamResponse], error) {
	return c.colloRateWebStream.CallServerStream(ctx, req)
}

// ColloRateWebServiceHandler is an implementation of the api.v2.ColloRateWebService service.
type ColloRateWebServiceHandler interface {
	ColloRateWebStream(context.Context, *connect.Request[v2.ColloRateWebStreamRequest], *connect.ServerStream[v2.ColloRateWebStreamResponse]) error
}

// NewColloRateWebServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewColloRateWebServiceHandler(svc ColloRateWebServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	colloRateWebServiceColloRateWebStreamHandler := connect.NewServerStreamHandler(
		ColloRateWebServiceColloRateWebStreamProcedure,
		svc.ColloRateWebStream,
		connect.WithSchema(colloRateWebServiceColloRateWebStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.ColloRateWebService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ColloRateWebServiceColloRateWebStreamProcedure:
			colloRateWebServiceColloRateWebStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedColloRateWebServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedColloRateWebServiceHandler struct{}

func (UnimplementedColloRateWebServiceHandler) ColloRateWebStream(context.Context, *connect.Request[v2.ColloRateWebStreamRequest], *connect.ServerStream[v2.ColloRateWebStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.ColloRateWebService.ColloRateWebStream is not implemented"))
}
