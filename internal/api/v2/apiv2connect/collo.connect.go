// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/collo.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v2 "yyyoichi/Collo-API/internal/api/v2"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ColloNetworkServiceName is the fully-qualified name of the ColloNetworkService service.
	ColloNetworkServiceName = "api.v2.ColloNetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ColloNetworkServiceColloNetworkStreamProcedure is the fully-qualified name of the
	// ColloNetworkService's ColloNetworkStream RPC.
	ColloNetworkServiceColloNetworkStreamProcedure = "/api.v2.ColloNetworkService/ColloNetworkStream"
)

// ColloNetworkServiceClient is a client for the api.v2.ColloNetworkService service.
type ColloNetworkServiceClient interface {
	ColloNetworkStream(context.Context) *connect.BidiStreamForClient[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse]
}

// NewColloNetworkServiceClient constructs a client for the api.v2.ColloNetworkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewColloNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ColloNetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &colloNetworkServiceClient{
		colloNetworkStream: connect.NewClient[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse](
			httpClient,
			baseURL+ColloNetworkServiceColloNetworkStreamProcedure,
			opts...,
		),
	}
}

// colloNetworkServiceClient implements ColloNetworkServiceClient.
type colloNetworkServiceClient struct {
	colloNetworkStream *connect.Client[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse]
}

// ColloNetworkStream calls api.v2.ColloNetworkService.ColloNetworkStream.
func (c *colloNetworkServiceClient) ColloNetworkStream(ctx context.Context) *connect.BidiStreamForClient[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse] {
	return c.colloNetworkStream.CallBidiStream(ctx)
}

// ColloNetworkServiceHandler is an implementation of the api.v2.ColloNetworkService service.
type ColloNetworkServiceHandler interface {
	ColloNetworkStream(context.Context, *connect.BidiStream[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse]) error
}

// NewColloNetworkServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewColloNetworkServiceHandler(svc ColloNetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	colloNetworkServiceColloNetworkStreamHandler := connect.NewBidiStreamHandler(
		ColloNetworkServiceColloNetworkStreamProcedure,
		svc.ColloNetworkStream,
		opts...,
	)
	return "/api.v2.ColloNetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ColloNetworkServiceColloNetworkStreamProcedure:
			colloNetworkServiceColloNetworkStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedColloNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedColloNetworkServiceHandler struct{}

func (UnimplementedColloNetworkServiceHandler) ColloNetworkStream(context.Context, *connect.BidiStream[v2.ColloNetworkStreamRequest, v2.ColloNetworkStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.ColloNetworkService.ColloNetworkStream is not implemented"))
}
