// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v2/collo.proto (package api.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message api.v2.ColloNetworkStreamRequest
 */
export class ColloNetworkStreamRequest extends Message<ColloNetworkStreamRequest> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  /**
   * @generated from field: uint32 forcus_node_id = 4;
   */
  forcusNodeId = 0;

  constructor(data?: PartialMessage<ColloNetworkStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.ColloNetworkStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "message", T: Timestamp },
    { no: 3, name: "until", kind: "message", T: Timestamp },
    { no: 4, name: "forcus_node_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloNetworkStreamRequest {
    return new ColloNetworkStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloNetworkStreamRequest {
    return new ColloNetworkStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloNetworkStreamRequest {
    return new ColloNetworkStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColloNetworkStreamRequest | PlainMessage<ColloNetworkStreamRequest> | undefined, b: ColloNetworkStreamRequest | PlainMessage<ColloNetworkStreamRequest> | undefined): boolean {
    return proto3.util.equals(ColloNetworkStreamRequest, a, b);
  }
}

/**
 * @generated from message api.v2.ColloNetworkStreamResponse
 */
export class ColloNetworkStreamResponse extends Message<ColloNetworkStreamResponse> {
  /**
   * @generated from field: repeated api.v2.Node nodes = 1;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated api.v2.Edge edges = 2;
   */
  edges: Edge[] = [];

  /**
   * @generated from field: uint32 dones = 3;
   */
  dones = 0;

  /**
   * @generated from field: uint32 needs = 4;
   */
  needs = 0;

  constructor(data?: PartialMessage<ColloNetworkStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.ColloNetworkStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 2, name: "edges", kind: "message", T: Edge, repeated: true },
    { no: 3, name: "dones", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "needs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloNetworkStreamResponse {
    return new ColloNetworkStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloNetworkStreamResponse {
    return new ColloNetworkStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloNetworkStreamResponse {
    return new ColloNetworkStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColloNetworkStreamResponse | PlainMessage<ColloNetworkStreamResponse> | undefined, b: ColloNetworkStreamResponse | PlainMessage<ColloNetworkStreamResponse> | undefined): boolean {
    return proto3.util.equals(ColloNetworkStreamResponse, a, b);
  }
}

/**
 * @generated from message api.v2.ColloWebStreamRequest
 */
export class ColloWebStreamRequest extends Message<ColloWebStreamRequest> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  /**
   * @generated from field: uint32 forcus_node_id = 4;
   */
  forcusNodeId = 0;

  constructor(data?: PartialMessage<ColloWebStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.ColloWebStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "message", T: Timestamp },
    { no: 3, name: "until", kind: "message", T: Timestamp },
    { no: 4, name: "forcus_node_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloWebStreamRequest {
    return new ColloWebStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloWebStreamRequest {
    return new ColloWebStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloWebStreamRequest {
    return new ColloWebStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColloWebStreamRequest | PlainMessage<ColloWebStreamRequest> | undefined, b: ColloWebStreamRequest | PlainMessage<ColloWebStreamRequest> | undefined): boolean {
    return proto3.util.equals(ColloWebStreamRequest, a, b);
  }
}

/**
 * @generated from message api.v2.ColloWebStreamResponse
 */
export class ColloWebStreamResponse extends Message<ColloWebStreamResponse> {
  /**
   * @generated from field: repeated api.v2.Node nodes = 1;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated api.v2.Edge edges = 2;
   */
  edges: Edge[] = [];

  /**
   * @generated from field: uint32 dones = 3;
   */
  dones = 0;

  /**
   * @generated from field: uint32 needs = 4;
   */
  needs = 0;

  constructor(data?: PartialMessage<ColloWebStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.ColloWebStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 2, name: "edges", kind: "message", T: Edge, repeated: true },
    { no: 3, name: "dones", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "needs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloWebStreamResponse {
    return new ColloWebStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloWebStreamResponse {
    return new ColloWebStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloWebStreamResponse {
    return new ColloWebStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColloWebStreamResponse | PlainMessage<ColloWebStreamResponse> | undefined, b: ColloWebStreamResponse | PlainMessage<ColloWebStreamResponse> | undefined): boolean {
    return proto3.util.equals(ColloWebStreamResponse, a, b);
  }
}

/**
 * @generated from message api.v2.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: uint32 node_id = 1;
   */
  nodeId = 0;

  /**
   * @generated from field: string word = 2;
   */
  word = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "word", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message api.v2.Edge
 */
export class Edge extends Message<Edge> {
  /**
   * @generated from field: uint32 edge_id = 1;
   */
  edgeId = 0;

  /**
   * @generated from field: uint32 node_id1 = 2;
   */
  nodeId1 = 0;

  /**
   * @generated from field: uint32 node_id2 = 3;
   */
  nodeId2 = 0;

  /**
   * @generated from field: uint32 count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<Edge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v2.Edge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "edge_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "node_id1", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "node_id2", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge {
    return new Edge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJsonString(jsonString, options);
  }

  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean {
    return proto3.util.equals(Edge, a, b);
  }
}

