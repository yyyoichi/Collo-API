// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file api/v1/collo.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.ColloStreamRequest
 */
export class ColloStreamRequest extends Message<ColloStreamRequest> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  constructor(data?: PartialMessage<ColloStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ColloStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "message", T: Timestamp },
    { no: 3, name: "until", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloStreamRequest {
    return new ColloStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloStreamRequest {
    return new ColloStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloStreamRequest {
    return new ColloStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColloStreamRequest | PlainMessage<ColloStreamRequest> | undefined, b: ColloStreamRequest | PlainMessage<ColloStreamRequest> | undefined): boolean {
    return proto3.util.equals(ColloStreamRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ColloStreamResponse
 */
export class ColloStreamResponse extends Message<ColloStreamResponse> {
  /**
   * @generated from field: map<string, string> words = 1;
   */
  words: { [key: string]: string } = {};

  /**
   * @generated from field: repeated string pairs = 2;
   */
  pairs: string[] = [];

  constructor(data?: PartialMessage<ColloStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ColloStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "words", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "pairs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColloStreamResponse {
    return new ColloStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColloStreamResponse | PlainMessage<ColloStreamResponse> | undefined, b: ColloStreamResponse | PlainMessage<ColloStreamResponse> | undefined): boolean {
    return proto3.util.equals(ColloStreamResponse, a, b);
  }
}

